{"version":3,"file":"static/css/main.f089fa50.css","mappings":"AAIA,EACE,QAAS,CACT,SACF,CCLA,YAKI,wBAAyB,CAHzB,QAAW,CACX,YAAa,CAFb,eAMJ,CAGA,oBAJI,kBAAmB,CAFnB,YAqBJ,CAfA,QAEI,aAAc,CACd,cAAe,CAIf,YAAa,CAIb,sBAAuB,CAPvB,mBAAoB,CAIpB,WAAY,CACZ,YAAa,CARb,iBAAkB,CAIlB,SAAU,CAQV,SAEJ,CAIA,eAEI,wBAA6B,CAD7B,UAAW,CAGX,WAAY,CAGZ,MAAO,CAFP,iBAAkB,CAClB,KAAM,CAHN,UAAW,CAMX,UAKJ,CAEA,wBALI,oBAAqB,CACrB,kBAAmB,CAFnB,wBAgBJ,CAVA,SAKI,aAAc,CAJd,WAAY,CAKZ,wBAAyB,CAHzB,WAAY,CACZ,YAAa,CAFb,SAQJ,CAIA,eAKI,wBAA6B,CAH7B,WAAY,CACZ,WAAY,CACZ,mBAAyB,CAHzB,eAKJ,CAMA,gCAII,gBAAuB,CADvB,YAAa,CAIb,eAAgB,CANhB,UAWJ,CAIA,gDANI,oBAAqB,CACrB,kBAAmB,CAFnB,wBAAqC,CAJrC,aAAc,CACd,cAAe,CAEf,kBAoBJ,CAZA,gBAGI,wBAA6B,CAQ7B,WAAY,CATZ,YAAa,CAQb,gBAAiB,CATjB,eAWJ,CAEA,SAGI,aAAS,CAFT,YAAa,CAEb,QAAS,CADT,mCAAqC,CAErC,QAEJ,CAIA,gBAKI,wBAA6B,CAI7B,oBAAqB,CACrB,kBAAmB,CAJnB,wBAAqC,CACrC,aAAc,CAId,cAAe,CAHf,cAAe,CANf,WAAY,CAEZ,kBAAmB,CADnB,eAAgB,CAShB,6CAAiD,CAXjD,UAYJ,CAKA,sBACI,wBAAyB,CACzB,qBACJ,CAKA,uBAEI,wBAAyB,CADzB,oBAEJ,CAKA,oCAGI,YACI,qBAAsB,CACtB,YACJ,CAEA,QACI,UAEJ,CACA,iBAFI,UAIJ,CAEA,gDAEI,cACJ,CAEA,gBAEI,cAAe,CADf,WAEJ,CACJ","sources":["App.css","Components/Calculator/Calculator.css"],"sourcesContent":["/* The CSS code `*{ margin: 0; padding: 0; }` is a CSS reset. It sets the margin and padding of all\nelements on the page to 0, effectively removing any default spacing that may be applied by the\nbrowser. This is often used as a starting point for CSS stylesheets to ensure consistent styling\nacross different browsers. */\n*{\n  margin: 0;\n  padding: 0;\n}","/* The CSS code you provided is defining the styles for a calculator interface. */\r\n/* The `.calculator` class is defining the styles for a calculator container. */\r\n.calculator {\r\n    width: 100% auto;\r\n    margin: 0px;\r\n    padding: 60px;\r\n    display: flex;\r\n    background-color: #1d1716;\r\n    align-items: center;\r\n}\r\n\r\n/* The `.calNav` class is defining the styles for a navigation element in the calculator interface. */\r\n.calNav {\r\n    position: relative;\r\n    color: #FAECE2;\r\n    font-size: 40px;\r\n    letter-spacing: 10px;\r\n    width: 40%;\r\n    \r\n    height: 500px;\r\n    margin: 10px;\r\n    padding: 30px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 1;\r\n    \r\n}\r\n\r\n/* The `.calNav::before` selector is creating a pseudo-element that is inserted before the content of\r\nthe `.calNav` element. */\r\n.calNav::before {\r\n    content: \"\";\r\n    background-color: transparent;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n\r\n    z-index: -1;\r\n    box-shadow: 0 0 20px rgba(0, 0, 0, 1);\r\n    border: 1px solid red;\r\n    border-radius: 20px;\r\n    \r\n}\r\n/* The `.calCont` class is defining the styles for a calculator container. */\r\n.calCont {\r\n    height: auto;\r\n    width: 60%;\r\n    margin: 10px;\r\n    padding: 30px;\r\n    display: block;\r\n    justify-content: baseline;\r\n    box-shadow: 0 0 20px rgba(0, 0, 0, 1);\r\n    border: 1px solid red;\r\n    border-radius: 20px;\r\n}\r\n\r\n/* The `.input-display` class is defining the styles for an input display element in the calculator\r\ninterface. */\r\n.input-display {\r\n    width: 100% auto;\r\n    height: auto;\r\n    margin: 10px;\r\n    padding: 30px 30px 0 30px;\r\n    background-color: transparent;\r\n}\r\n\r\n\r\n/* The CSS code `.input-display input[type=\"text\"]` is targeting an input element of type \"text\" that\r\nis inside an element with the class \"input-display\". It is defining the styles for this specific\r\ninput element. */\r\n.input-display input[type=\"text\"] {\r\n    width: 100%;\r\n    border: none;\r\n    outline: none;\r\n    background: transparent;\r\n    color: #f3bc77;\r\n    font-size: 60px;\r\n    text-align: left;\r\n    letter-spacing: 5px;\r\n    box-shadow: 0 0 15px rgba(0, 0, 0, 1);\r\n    border: 1px solid red;\r\n    border-radius: 10px;\r\n}\r\n\r\n/* The `.result-display` class is defining the styles for a result display element in the calculator\r\ninterface. */\r\n.result-display {\r\n    width: 100% auto;\r\n    padding: 10px;\r\n    background-color: transparent;\r\n    color: #f3bc77;\r\n    font-size: 60px;\r\n    letter-spacing: 5px;\r\n    box-shadow: 0 0 15px rgba(0, 0, 0, 1);\r\n    border: 1px solid red;\r\n    border-radius: 10px;\r\n    text-align: right;\r\n    margin: 40px;\r\n}\r\n/* The CSS code you provided is defining the styles for a set of buttons in the calculator interface. */\r\n.buttons {\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    gap: 10px;\r\n    margin: 0;\r\n    \r\n}\r\n\r\n/* The CSS code `.buttons button` is targeting all button elements that are inside an element with the\r\nclass \"buttons\". It is defining the styles for these specific button elements. */\r\n.buttons button {\r\n    width: 100%;\r\n    height: 60px;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    background-color: transparent;\r\n    box-shadow: 0 0 15px rgba(0, 0, 0, 1);\r\n    color: #f3bc77;\r\n    font-size: 24px;\r\n    border: 1px solid red;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s, transform 0.2s;\r\n}\r\n\r\n/* The CSS code `.buttons button:hover` is targeting all button elements that are inside an element\r\nwith the class \"buttons\" when they are being hovered over by the user. It is defining the styles for\r\nthese specific button elements when they are in the hover state. */\r\n.buttons button:hover {\r\n    background-color: #a55233;\r\n    transform: scale(1.05);\r\n}\r\n\r\n/* The CSS code `.buttons button:active` is targeting all button elements that are inside an element\r\nwith the class \"buttons\" when they are in the active state, meaning when they are being clicked or\r\npressed by the user. */\r\n.buttons button:active {\r\n    transform: scale(0.95);\r\n    background-color: #402a23;\r\n}\r\n\r\n/* The `@media` rule in CSS is used to apply different styles based on the characteristics of the\r\ndevice or screen size. In this case, the `@media screen and (max-width: 768px)` rule is targeting\r\nscreens with a maximum width of 768 pixels. */\r\n@media screen and (max-width: 768px) {\r\n    /* The CSS code you provided is using a media query to apply different styles to the calculator\r\n    interface when the screen width is less than or equal to 768 pixels. */\r\n    .calculator {\r\n        flex-direction: column;\r\n        padding: 30px;\r\n    }\r\n\r\n    .calNav{\r\n        height: 5px;\r\n        width: 100%;\r\n    }\r\n    .calCont {\r\n        width: 100%;\r\n    }\r\n\r\n    .input-display input[type=\"text\"],\r\n    .result-display {\r\n        font-size: 40px;\r\n    }\r\n\r\n    .buttons button {\r\n        height: 50px;\r\n        font-size: 18px;\r\n    }\r\n}\r\n\r\n"],"names":[],"sourceRoot":""}